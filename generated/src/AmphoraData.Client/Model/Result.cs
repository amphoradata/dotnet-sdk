/* 
 * AmphoraApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AmphoraData.Client.Client.OpenAPIDateConverter;

namespace AmphoraData.Client.Model
{
    /// <summary>
    /// Result
    /// </summary>
    [DataContract]
    public partial class Result :  IEquatable<Result>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="id">id.</param>
        /// <param name="score">score.</param>
        /// <param name="address">address.</param>
        /// <param name="position">position.</param>
        /// <param name="viewport">viewport.</param>
        /// <param name="entryPoints">entryPoints.</param>
        /// <param name="info">info.</param>
        /// <param name="poi">poi.</param>
        public Result(string type = default(string), string id = default(string), double score = default(double), Address address = default(Address), Position position = default(Position), Viewport viewport = default(Viewport), List<EntryPoint> entryPoints = default(List<EntryPoint>), string info = default(string), Poi poi = default(Poi))
        {
            this.Type = type;
            this.Id = id;
            this.Score = score;
            this.Address = address;
            this.Position = position;
            this.Viewport = viewport;
            this.EntryPoints = entryPoints;
            this.Info = info;
            this.Poi = poi;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double Score { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// Gets or Sets Viewport
        /// </summary>
        [DataMember(Name="viewport", EmitDefaultValue=false)]
        public Viewport Viewport { get; set; }

        /// <summary>
        /// Gets or Sets EntryPoints
        /// </summary>
        [DataMember(Name="entryPoints", EmitDefaultValue=false)]
        public List<EntryPoint> EntryPoints { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }

        /// <summary>
        /// Gets or Sets Poi
        /// </summary>
        [DataMember(Name="poi", EmitDefaultValue=false)]
        public Poi Poi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Viewport: ").Append(Viewport).Append("\n");
            sb.Append("  EntryPoints: ").Append(EntryPoints).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Poi: ").Append(Poi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Result);
        }

        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="input">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Viewport == input.Viewport ||
                    (this.Viewport != null &&
                    this.Viewport.Equals(input.Viewport))
                ) && 
                (
                    this.EntryPoints == input.EntryPoints ||
                    this.EntryPoints != null &&
                    input.EntryPoints != null &&
                    this.EntryPoints.SequenceEqual(input.EntryPoints)
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.Poi == input.Poi ||
                    (this.Poi != null &&
                    this.Poi.Equals(input.Poi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Viewport != null)
                    hashCode = hashCode * 59 + this.Viewport.GetHashCode();
                if (this.EntryPoints != null)
                    hashCode = hashCode * 59 + this.EntryPoints.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.Poi != null)
                    hashCode = hashCode * 59 + this.Poi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
