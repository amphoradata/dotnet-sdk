/* 
 * Amphora Data Api
 *
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: rian@amphoradata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AmphoraData.Client.Client;
using AmphoraData.Client.Model;

namespace AmphoraData.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAmphoraeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an Amphora
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns></returns>
        void ApiAmphoraeIdDelete (string id);

        /// <summary>
        /// Deletes an Amphora
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAmphoraeIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns></returns>
        void ApiAmphoraeIdFilesFileGet (string id, string file);

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAmphoraeIdFilesFileGetWithHttpInfo (string id, string file);
        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns></returns>
        void ApiAmphoraeIdFilesFilePut (string id, string file);

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAmphoraeIdFilesFilePutWithHttpInfo (string id, string file);
        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiAmphoraeIdFilesGet (string id);

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiAmphoraeIdFilesGetWithHttpInfo (string id);
        /// <summary>
        /// Get&#39;s details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>AmphoraExtendedDto</returns>
        AmphoraExtendedDto ApiAmphoraeIdGet (string id);

        /// <summary>
        /// Get&#39;s details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        ApiResponse<AmphoraExtendedDto> ApiAmphoraeIdGetWithHttpInfo (string id);
        /// <summary>
        /// Updates the details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>AmphoraExtendedDto</returns>
        AmphoraExtendedDto ApiAmphoraeIdPut (string id, AmphoraExtendedDto amphoraExtendedDto = null);

        /// <summary>
        /// Updates the details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        ApiResponse<AmphoraExtendedDto> ApiAmphoraeIdPutWithHttpInfo (string id, AmphoraExtendedDto amphoraExtendedDto = null);
        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>List&lt;SignalDto&gt;</returns>
        List<SignalDto> ApiAmphoraeIdSignalsGet (string id);

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of List&lt;SignalDto&gt;</returns>
        ApiResponse<List<SignalDto>> ApiAmphoraeIdSignalsGetWithHttpInfo (string id);
        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>SignalDto</returns>
        SignalDto ApiAmphoraeIdSignalsPost (string id, SignalDto signalDto = null);

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>ApiResponse of SignalDto</returns>
        ApiResponse<SignalDto> ApiAmphoraeIdSignalsPostWithHttpInfo (string id, SignalDto signalDto = null);
        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void ApiAmphoraeIdSignalsValuesPost (string id, Dictionary<string, Object> requestBody = null);

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAmphoraeIdSignalsValuesPostWithHttpInfo (string id, Dictionary<string, Object> requestBody = null);
        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>AmphoraExtendedDto</returns>
        AmphoraExtendedDto ApiAmphoraePost (CreateAmphoraDto createAmphoraDto = null);

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        ApiResponse<AmphoraExtendedDto> ApiAmphoraePostWithHttpInfo (CreateAmphoraDto createAmphoraDto = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAmphoraeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an Amphora
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAmphoraeIdDeleteAsync (string id);

        /// <summary>
        /// Deletes an Amphora
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAmphoraeIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAmphoraeIdFilesFileGetAsync (string id, string file);

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAmphoraeIdFilesFileGetAsyncWithHttpInfo (string id, string file);
        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAmphoraeIdFilesFilePutAsync (string id, string file);

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAmphoraeIdFilesFilePutAsyncWithHttpInfo (string id, string file);
        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiAmphoraeIdFilesGetAsync (string id);

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiAmphoraeIdFilesGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get&#39;s details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraeIdGetAsync (string id);

        /// <summary>
        /// Get&#39;s details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AmphoraExtendedDto>> ApiAmphoraeIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraeIdPutAsync (string id, AmphoraExtendedDto amphoraExtendedDto = null);

        /// <summary>
        /// Updates the details of an Amphora by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AmphoraExtendedDto>> ApiAmphoraeIdPutAsyncWithHttpInfo (string id, AmphoraExtendedDto amphoraExtendedDto = null);
        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of List&lt;SignalDto&gt;</returns>
        System.Threading.Tasks.Task<List<SignalDto>> ApiAmphoraeIdSignalsGetAsync (string id);

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (List&lt;SignalDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SignalDto>>> ApiAmphoraeIdSignalsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>Task of SignalDto</returns>
        System.Threading.Tasks.Task<SignalDto> ApiAmphoraeIdSignalsPostAsync (string id, SignalDto signalDto = null);

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>Task of ApiResponse (SignalDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignalDto>> ApiAmphoraeIdSignalsPostAsyncWithHttpInfo (string id, SignalDto signalDto = null);
        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAmphoraeIdSignalsValuesPostAsync (string id, Dictionary<string, Object> requestBody = null);

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAmphoraeIdSignalsValuesPostAsyncWithHttpInfo (string id, Dictionary<string, Object> requestBody = null);
        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraePostAsync (CreateAmphoraDto createAmphoraDto = null);

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AmphoraExtendedDto>> ApiAmphoraePostAsyncWithHttpInfo (CreateAmphoraDto createAmphoraDto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAmphoraeApi : IAmphoraeApiSync, IAmphoraeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AmphoraeApi : IAmphoraeApi
    {
        private AmphoraData.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AmphoraeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AmphoraeApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AmphoraeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AmphoraeApi(String basePath)
        {
            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                new AmphoraData.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AmphoraeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AmphoraeApi(AmphoraData.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AmphoraeApi(AmphoraData.Client.Client.ISynchronousClient client,AmphoraData.Client.Client.IAsynchronousClient asyncClient, AmphoraData.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AmphoraData.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AmphoraData.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmphoraData.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmphoraData.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes an Amphora 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns></returns>
        public void ApiAmphoraeIdDelete (string id)
        {
             ApiAmphoraeIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an Amphora 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiAmphoraeIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdDelete");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes an Amphora 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAmphoraeIdDeleteAsync (string id)
        {
             await ApiAmphoraeIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes an Amphora 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiAmphoraeIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdDelete");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns></returns>
        public void ApiAmphoraeIdFilesFileGet (string id, string file)
        {
             ApiAmphoraeIdFilesFileGetWithHttpInfo(id, file);
        }

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiAmphoraeIdFilesFileGetWithHttpInfo (string id, string file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesFileGet");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'file' when calling AmphoraeApi->ApiAmphoraeIdFilesFileGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
                requestOptions.PathParameters.Add("file", AmphoraData.Client.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get<Object>("/api/amphorae/{id}/files/{file}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesFileGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAmphoraeIdFilesFileGetAsync (string id, string file)
        {
             await ApiAmphoraeIdFilesFileGetAsyncWithHttpInfo(id, file);

        }

        /// <summary>
        /// Get&#39;s the contents of a file. Returns application/octet-stream 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiAmphoraeIdFilesFileGetAsyncWithHttpInfo (string id, string file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesFileGet");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'file' when calling AmphoraeApi->ApiAmphoraeIdFilesFileGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
                requestOptions.PathParameters.Add("file", AmphoraData.Client.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/api/amphorae/{id}/files/{file}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesFileGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns></returns>
        public void ApiAmphoraeIdFilesFilePut (string id, string file)
        {
             ApiAmphoraeIdFilesFilePutWithHttpInfo(id, file);
        }

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiAmphoraeIdFilesFilePutWithHttpInfo (string id, string file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesFilePut");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'file' when calling AmphoraeApi->ApiAmphoraeIdFilesFilePut");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
                requestOptions.PathParameters.Add("file", AmphoraData.Client.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/api/amphorae/{id}/files/{file}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesFilePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAmphoraeIdFilesFilePutAsync (string id, string file)
        {
             await ApiAmphoraeIdFilesFilePutAsyncWithHttpInfo(id, file);

        }

        /// <summary>
        /// Set&#39;s the contents of a file. The request body becomes the content. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="file">The name of the file</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiAmphoraeIdFilesFilePutAsyncWithHttpInfo (string id, string file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesFilePut");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'file' when calling AmphoraeApi->ApiAmphoraeIdFilesFilePut");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
                requestOptions.PathParameters.Add("file", AmphoraData.Client.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/amphorae/{id}/files/{file}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesFilePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiAmphoraeIdFilesGet (string id)
        {
             AmphoraData.Client.Client.ApiResponse<List<string>> localVarResponse = ApiAmphoraeIdFilesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<string> > ApiAmphoraeIdFilesGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<string> >("/api/amphorae/{id}/files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiAmphoraeIdFilesGetAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<List<string>> localVarResponse = await ApiAmphoraeIdFilesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get&#39;s a list of an Amphora&#39;s files 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<string>>> ApiAmphoraeIdFilesGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdFilesGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<string>>("/api/amphorae/{id}/files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdFilesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>AmphoraExtendedDto</returns>
        public AmphoraExtendedDto ApiAmphoraeIdGet (string id)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = ApiAmphoraeIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get&#39;s details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        public AmphoraData.Client.Client.ApiResponse< AmphoraExtendedDto > ApiAmphoraeIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< AmphoraExtendedDto >("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        public async System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraeIdGetAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = await ApiAmphoraeIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get&#39;s details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto>> ApiAmphoraeIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<AmphoraExtendedDto>("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates the details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>AmphoraExtendedDto</returns>
        public AmphoraExtendedDto ApiAmphoraeIdPut (string id, AmphoraExtendedDto amphoraExtendedDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = ApiAmphoraeIdPutWithHttpInfo(id, amphoraExtendedDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        public AmphoraData.Client.Client.ApiResponse< AmphoraExtendedDto > ApiAmphoraeIdPutWithHttpInfo (string id, AmphoraExtendedDto amphoraExtendedDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdPut");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = amphoraExtendedDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put< AmphoraExtendedDto >("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates the details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        public async System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraeIdPutAsync (string id, AmphoraExtendedDto amphoraExtendedDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = await ApiAmphoraeIdPutAsyncWithHttpInfo(id, amphoraExtendedDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of an Amphora by Id 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="amphoraExtendedDto"> (optional)</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto>> ApiAmphoraeIdPutAsyncWithHttpInfo (string id, AmphoraExtendedDto amphoraExtendedDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdPut");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = amphoraExtendedDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<AmphoraExtendedDto>("/api/amphorae/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>List&lt;SignalDto&gt;</returns>
        public List<SignalDto> ApiAmphoraeIdSignalsGet (string id)
        {
             AmphoraData.Client.Client.ApiResponse<List<SignalDto>> localVarResponse = ApiAmphoraeIdSignalsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>ApiResponse of List&lt;SignalDto&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<SignalDto> > ApiAmphoraeIdSignalsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<SignalDto> >("/api/amphorae/{id}/signals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of List&lt;SignalDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SignalDto>> ApiAmphoraeIdSignalsGetAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<List<SignalDto>> localVarResponse = await ApiAmphoraeIdSignalsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <returns>Task of ApiResponse (List&lt;SignalDto&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<SignalDto>>> ApiAmphoraeIdSignalsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<SignalDto>>("/api/amphorae/{id}/signals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>SignalDto</returns>
        public SignalDto ApiAmphoraeIdSignalsPost (string id, SignalDto signalDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<SignalDto> localVarResponse = ApiAmphoraeIdSignalsPostWithHttpInfo(id, signalDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>ApiResponse of SignalDto</returns>
        public AmphoraData.Client.Client.ApiResponse< SignalDto > ApiAmphoraeIdSignalsPostWithHttpInfo (string id, SignalDto signalDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsPost");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = signalDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< SignalDto >("/api/amphorae/{id}/signals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>Task of SignalDto</returns>
        public async System.Threading.Tasks.Task<SignalDto> ApiAmphoraeIdSignalsPostAsync (string id, SignalDto signalDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<SignalDto> localVarResponse = await ApiAmphoraeIdSignalsPostAsyncWithHttpInfo(id, signalDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Associates a signal with an Amphora. Signal is created if not existing. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="signalDto"> (optional)</param>
        /// <returns>Task of ApiResponse (SignalDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<SignalDto>> ApiAmphoraeIdSignalsPostAsyncWithHttpInfo (string id, SignalDto signalDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsPost");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = signalDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SignalDto>("/api/amphorae/{id}/signals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void ApiAmphoraeIdSignalsValuesPost (string id, Dictionary<string, Object> requestBody = null)
        {
             ApiAmphoraeIdSignalsValuesPostWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiAmphoraeIdSignalsValuesPostWithHttpInfo (string id, Dictionary<string, Object> requestBody = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsValuesPost");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/api/amphorae/{id}/signals/values", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsValuesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAmphoraeIdSignalsValuesPostAsync (string id, Dictionary<string, Object> requestBody = null)
        {
             await ApiAmphoraeIdSignalsValuesPostAsyncWithHttpInfo(id, requestBody);

        }

        /// <summary>
        /// Get&#39;s the signals associated with an Amphora. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Amphora Id</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiAmphoraeIdSignalsValuesPostAsyncWithHttpInfo (string id, Dictionary<string, Object> requestBody = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AmphoraeApi->ApiAmphoraeIdSignalsValuesPost");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/api/amphorae/{id}/signals/values", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraeIdSignalsValuesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>AmphoraExtendedDto</returns>
        public AmphoraExtendedDto ApiAmphoraePost (CreateAmphoraDto createAmphoraDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = ApiAmphoraePostWithHttpInfo(createAmphoraDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>ApiResponse of AmphoraExtendedDto</returns>
        public AmphoraData.Client.Client.ApiResponse< AmphoraExtendedDto > ApiAmphoraePostWithHttpInfo (CreateAmphoraDto createAmphoraDto = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createAmphoraDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< AmphoraExtendedDto >("/api/amphorae", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>Task of AmphoraExtendedDto</returns>
        public async System.Threading.Tasks.Task<AmphoraExtendedDto> ApiAmphoraePostAsync (CreateAmphoraDto createAmphoraDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto> localVarResponse = await ApiAmphoraePostAsyncWithHttpInfo(createAmphoraDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new empty Amphora in the user&#39;s organisation 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAmphoraDto"> (optional)</param>
        /// <returns>Task of ApiResponse (AmphoraExtendedDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<AmphoraExtendedDto>> ApiAmphoraePostAsyncWithHttpInfo (CreateAmphoraDto createAmphoraDto = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createAmphoraDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<AmphoraExtendedDto>("/api/amphorae", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiAmphoraePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
