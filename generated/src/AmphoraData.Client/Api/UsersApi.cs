/* 
 * AmphoraApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AmphoraData.Client.Client;
using AmphoraData.Client.Model;

namespace AmphoraData.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new User. Returns the password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>string</returns>
        string ApiUsersPost (UserDto userDto = null);

        /// <summary>
        /// Creates a new User. Returns the password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiUsersPostWithHttpInfo (UserDto userDto = null);
        /// <summary>
        /// Get&#39;s logged in users information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserDto</returns>
        UserDto ApiUsersSelfGet ();

        /// <summary>
        /// Get&#39;s logged in users information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> ApiUsersSelfGetWithHttpInfo ();
        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns></returns>
        void ApiUsersUsernameDelete (string userName);

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersUsernameDeleteWithHttpInfo (string userName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new User. Returns the password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiUsersPostAsync (UserDto userDto = null);

        /// <summary>
        /// Creates a new User. Returns the password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiUsersPostAsyncWithHttpInfo (UserDto userDto = null);
        /// <summary>
        /// Get&#39;s logged in users information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> ApiUsersSelfGetAsync ();

        /// <summary>
        /// Get&#39;s logged in users information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> ApiUsersSelfGetAsyncWithHttpInfo ();
        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersUsernameDeleteAsync (string userName);

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersUsernameDeleteAsyncWithHttpInfo (string userName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private AmphoraData.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                new AmphoraData.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(AmphoraData.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(AmphoraData.Client.Client.ISynchronousClient client,AmphoraData.Client.Client.IAsynchronousClient asyncClient, AmphoraData.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AmphoraData.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AmphoraData.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmphoraData.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmphoraData.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new User. Returns the password. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>string</returns>
        public string ApiUsersPost (UserDto userDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<string> localVarResponse = ApiUsersPostWithHttpInfo(userDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new User. Returns the password. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public AmphoraData.Client.Client.ApiResponse< string > ApiUsersPostWithHttpInfo (UserDto userDto = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = userDto;


            // make the HTTP request

            var response = this.Client.Post< string >("/api/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creates a new User. Returns the password. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiUsersPostAsync (UserDto userDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<string> localVarResponse = await ApiUsersPostAsyncWithHttpInfo(userDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new User. Returns the password. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userDto"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<string>> ApiUsersPostAsyncWithHttpInfo (UserDto userDto = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = userDto;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<string>("/api/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s logged in users information. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserDto</returns>
        public UserDto ApiUsersSelfGet ()
        {
             AmphoraData.Client.Client.ApiResponse<UserDto> localVarResponse = ApiUsersSelfGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get&#39;s logged in users information. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserDto</returns>
        public AmphoraData.Client.Client.ApiResponse< UserDto > ApiUsersSelfGetWithHttpInfo ()
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< UserDto >("/api/users/self", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersSelfGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get&#39;s logged in users information. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> ApiUsersSelfGetAsync ()
        {
             AmphoraData.Client.Client.ApiResponse<UserDto> localVarResponse = await ApiUsersSelfGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get&#39;s logged in users information. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<UserDto>> ApiUsersSelfGetAsyncWithHttpInfo ()
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserDto>("/api/users/self", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersSelfGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a user 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns></returns>
        public void ApiUsersUsernameDelete (string userName)
        {
             ApiUsersUsernameDeleteWithHttpInfo(userName);
        }

        /// <summary>
        /// Deletes a user 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiUsersUsernameDeleteWithHttpInfo (string userName)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ApiUsersUsernameDelete");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userName != null)
                requestOptions.PathParameters.Add("userName", AmphoraData.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/api/users/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersUsernameDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a user 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersUsernameDeleteAsync (string userName)
        {
             await ApiUsersUsernameDeleteAsyncWithHttpInfo(userName);

        }

        /// <summary>
        /// Deletes a user 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">UserName of user to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiUsersUsernameDeleteAsyncWithHttpInfo (string userName)
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'userName' when calling UsersApi->ApiUsersUsernameDelete");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userName != null)
                requestOptions.PathParameters.Add("userName", AmphoraData.Client.Client.ClientUtils.ParameterToString(userName)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/api/users/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiUsersUsernameDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
