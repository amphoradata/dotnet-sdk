/* 
 * Amphora Data Api
 *
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: rian@amphoradata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AmphoraData.Client.Client;
using AmphoraData.Client.Model;

namespace AmphoraData.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Searches for Amphorae by creator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        List<AmphoraDto> ApiSearchAmphoraeByCreatorGet (string userName = null);

        /// <summary>
        /// Searches for Amphorae by creator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        ApiResponse<List<AmphoraDto>> ApiSearchAmphoraeByCreatorGetWithHttpInfo (string userName = null);
        /// <summary>
        /// Searches for Amphorae by loction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        List<AmphoraDto> ApiSearchAmphoraeByLocationGet (double? lat = null, double? lon = null, double? dist = null);

        /// <summary>
        /// Searches for Amphorae by loction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        ApiResponse<List<AmphoraDto>> ApiSearchAmphoraeByLocationGetWithHttpInfo (double? lat = null, double? lon = null, double? dist = null);
        /// <summary>
        /// Searches for Amphorae in an Organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        List<AmphoraDto> ApiSearchAmphoraeByOrganisationGet (string orgId = null);

        /// <summary>
        /// Searches for Amphorae in an Organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        ApiResponse<List<AmphoraDto>> ApiSearchAmphoraeByOrganisationGetWithHttpInfo (string orgId = null);
        /// <summary>
        /// Searches for Amphorae.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        List<AmphoraDto> ApiSearchAmphoraePost (SearchParameters searchParameters = null);

        /// <summary>
        /// Searches for Amphorae.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        ApiResponse<List<AmphoraDto>> ApiSearchAmphoraePostWithHttpInfo (SearchParameters searchParameters = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Searches for Amphorae by creator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByCreatorGetAsync (string userName = null);

        /// <summary>
        /// Searches for Amphorae by creator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByCreatorGetAsyncWithHttpInfo (string userName = null);
        /// <summary>
        /// Searches for Amphorae by loction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByLocationGetAsync (double? lat = null, double? lon = null, double? dist = null);

        /// <summary>
        /// Searches for Amphorae by loction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByLocationGetAsyncWithHttpInfo (double? lat = null, double? lon = null, double? dist = null);
        /// <summary>
        /// Searches for Amphorae in an Organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByOrganisationGetAsync (string orgId = null);

        /// <summary>
        /// Searches for Amphorae in an Organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByOrganisationGetAsyncWithHttpInfo (string orgId = null);
        /// <summary>
        /// Searches for Amphorae.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraePostAsync (SearchParameters searchParameters = null);

        /// <summary>
        /// Searches for Amphorae.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraePostAsyncWithHttpInfo (SearchParameters searchParameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private AmphoraData.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                new AmphoraData.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(AmphoraData.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(AmphoraData.Client.Client.ISynchronousClient client,AmphoraData.Client.Client.IAsynchronousClient asyncClient, AmphoraData.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AmphoraData.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AmphoraData.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmphoraData.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmphoraData.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Searches for Amphorae by creator. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        public List<AmphoraDto> ApiSearchAmphoraeByCreatorGet (string userName = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = ApiSearchAmphoraeByCreatorGetWithHttpInfo(userName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for Amphorae by creator. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<AmphoraDto> > ApiSearchAmphoraeByCreatorGetWithHttpInfo (string userName = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userName != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "userName", userName))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<AmphoraDto> >("/api/search/amphorae/byCreator", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByCreatorGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae by creator. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByCreatorGetAsync (string userName = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = await ApiSearchAmphoraeByCreatorGetAsyncWithHttpInfo(userName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for Amphorae by creator. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User Name of the creator (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByCreatorGetAsyncWithHttpInfo (string userName = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userName != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "userName", userName))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<AmphoraDto>>("/api/search/amphorae/byCreator", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByCreatorGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae by loction. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        public List<AmphoraDto> ApiSearchAmphoraeByLocationGet (double? lat = null, double? lon = null, double? dist = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = ApiSearchAmphoraeByLocationGetWithHttpInfo(lat, lon, dist);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for Amphorae by loction. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<AmphoraDto> > ApiSearchAmphoraeByLocationGetWithHttpInfo (double? lat = null, double? lon = null, double? dist = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (lat != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "lat", lat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (lon != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "lon", lon))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dist != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "dist", dist))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<AmphoraDto> >("/api/search/amphorae/byLocation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByLocationGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae by loction. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByLocationGetAsync (double? lat = null, double? lon = null, double? dist = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = await ApiSearchAmphoraeByLocationGetAsyncWithHttpInfo(lat, lon, dist);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for Amphorae by loction. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude (optional)</param>
        /// <param name="lon">Longitude (optional)</param>
        /// <param name="dist">Distance from Latitude and Longitude in which to search (optional, default to 10D)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByLocationGetAsyncWithHttpInfo (double? lat = null, double? lon = null, double? dist = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (lat != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "lat", lat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (lon != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "lon", lon))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dist != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "dist", dist))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<AmphoraDto>>("/api/search/amphorae/byLocation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByLocationGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae in an Organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        public List<AmphoraDto> ApiSearchAmphoraeByOrganisationGet (string orgId = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = ApiSearchAmphoraeByOrganisationGetWithHttpInfo(orgId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for Amphorae in an Organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<AmphoraDto> > ApiSearchAmphoraeByOrganisationGetWithHttpInfo (string orgId = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orgId != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "orgId", orgId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<AmphoraDto> >("/api/search/amphorae/byOrganisation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByOrganisationGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae in an Organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraeByOrganisationGetAsync (string orgId = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = await ApiSearchAmphoraeByOrganisationGetAsyncWithHttpInfo(orgId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for Amphorae in an Organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organisation Id (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraeByOrganisationGetAsyncWithHttpInfo (string orgId = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (orgId != null)
            {
                foreach (var kvp in AmphoraData.Client.Client.ClientUtils.ParameterToMultiMap("", "orgId", orgId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<AmphoraDto>>("/api/search/amphorae/byOrganisation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraeByOrganisationGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>List&lt;AmphoraDto&gt;</returns>
        public List<AmphoraDto> ApiSearchAmphoraePost (SearchParameters searchParameters = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = ApiSearchAmphoraePostWithHttpInfo(searchParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches for Amphorae. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AmphoraDto&gt;</returns>
        public AmphoraData.Client.Client.ApiResponse< List<AmphoraDto> > ApiSearchAmphoraePostWithHttpInfo (SearchParameters searchParameters = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = searchParameters;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<AmphoraDto> >("/api/search/amphorae", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Searches for Amphorae. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>Task of List&lt;AmphoraDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AmphoraDto>> ApiSearchAmphoraePostAsync (SearchParameters searchParameters = null)
        {
             AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>> localVarResponse = await ApiSearchAmphoraePostAsyncWithHttpInfo(searchParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches for Amphorae. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AmphoraDto&gt;)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<List<AmphoraDto>>> ApiSearchAmphoraePostAsyncWithHttpInfo (SearchParameters searchParameters = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = searchParameters;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<AmphoraDto>>("/api/search/amphorae", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiSearchAmphoraePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
