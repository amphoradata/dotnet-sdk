/* 
 * Amphora Data Api
 *
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: rian@amphoradata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using AmphoraData.Client.Client;
using AmphoraData.Client.Model;

namespace AmphoraData.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        OrganisationDto ApiOrganisationsIdDelete (string id);

        /// <summary>
        /// Deletes an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        ApiResponse<OrganisationDto> ApiOrganisationsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Gets an organisation&#39;s details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        OrganisationDto ApiOrganisationsIdGet (string id);

        /// <summary>
        /// Gets an organisation&#39;s details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        ApiResponse<OrganisationDto> ApiOrganisationsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Accept an invitation to an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        OrganisationDto ApiOrganisationsIdInvitationsGet (string id);

        /// <summary>
        /// Accept an invitation to an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        ApiResponse<OrganisationDto> ApiOrganisationsIdInvitationsGetWithHttpInfo (string id);
        /// <summary>
        /// Invite a user/ email address to your organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns></returns>
        void ApiOrganisationsIdInvitationsPost (string id, Invitation invitation = null);

        /// <summary>
        /// Invite a user/ email address to your organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiOrganisationsIdInvitationsPostWithHttpInfo (string id, Invitation invitation = null);
        /// <summary>
        /// Updates an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns></returns>
        void ApiOrganisationsIdPut (string id, OrganisationDto organisationDto = null);

        /// <summary>
        /// Updates an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiOrganisationsIdPutWithHttpInfo (string id, OrganisationDto organisationDto = null);
        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>OrganisationDto</returns>
        OrganisationDto ApiOrganisationsPost (OrganisationDto organisationDto = null);

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        ApiResponse<OrganisationDto> ApiOrganisationsPostWithHttpInfo (OrganisationDto organisationDto = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdDeleteAsync (string id);

        /// <summary>
        /// Deletes an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationDto>> ApiOrganisationsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets an organisation&#39;s details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdGetAsync (string id);

        /// <summary>
        /// Gets an organisation&#39;s details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationDto>> ApiOrganisationsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Accept an invitation to an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdInvitationsGetAsync (string id);

        /// <summary>
        /// Accept an invitation to an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationDto>> ApiOrganisationsIdInvitationsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Invite a user/ email address to your organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiOrganisationsIdInvitationsPostAsync (string id, Invitation invitation = null);

        /// <summary>
        /// Invite a user/ email address to your organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiOrganisationsIdInvitationsPostAsyncWithHttpInfo (string id, Invitation invitation = null);
        /// <summary>
        /// Updates an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiOrganisationsIdPutAsync (string id, OrganisationDto organisationDto = null);

        /// <summary>
        /// Updates an organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiOrganisationsIdPutAsyncWithHttpInfo (string id, OrganisationDto organisationDto = null);
        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of OrganisationDto</returns>
        System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsPostAsync (OrganisationDto organisationDto = null);

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationDto>> ApiOrganisationsPostAsyncWithHttpInfo (OrganisationDto organisationDto = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationsApi : IOrganisationsApiSync, IOrganisationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganisationsApi : IOrganisationsApi
    {
        private AmphoraData.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganisationsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganisationsApi(String basePath)
        {
            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                new AmphoraData.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganisationsApi(AmphoraData.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AmphoraData.Client.Client.Configuration.MergeConfigurations(
                AmphoraData.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new AmphoraData.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganisationsApi(AmphoraData.Client.Client.ISynchronousClient client,AmphoraData.Client.Client.IAsynchronousClient asyncClient, AmphoraData.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AmphoraData.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AmphoraData.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AmphoraData.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AmphoraData.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AmphoraData.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        public OrganisationDto ApiOrganisationsIdDelete (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = ApiOrganisationsIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        public AmphoraData.Client.Client.ApiResponse< OrganisationDto > ApiOrganisationsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdDelete");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Delete< OrganisationDto >("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        public async System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdDeleteAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = await ApiOrganisationsIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<OrganisationDto>> ApiOrganisationsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdDelete");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<OrganisationDto>("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Gets an organisation&#39;s details. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        public OrganisationDto ApiOrganisationsIdGet (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = ApiOrganisationsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an organisation&#39;s details. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        public AmphoraData.Client.Client.ApiResponse< OrganisationDto > ApiOrganisationsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< OrganisationDto >("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Gets an organisation&#39;s details. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        public async System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdGetAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = await ApiOrganisationsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an organisation&#39;s details. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<OrganisationDto>> ApiOrganisationsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OrganisationDto>("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Accept an invitation to an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>OrganisationDto</returns>
        public OrganisationDto ApiOrganisationsIdInvitationsGet (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = ApiOrganisationsIdInvitationsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an invitation to an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        public AmphoraData.Client.Client.ApiResponse< OrganisationDto > ApiOrganisationsIdInvitationsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdInvitationsGet");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< OrganisationDto >("/api/organisations/{id}/invitations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdInvitationsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Accept an invitation to an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of OrganisationDto</returns>
        public async System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsIdInvitationsGetAsync (string id)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = await ApiOrganisationsIdInvitationsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept an invitation to an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<OrganisationDto>> ApiOrganisationsIdInvitationsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdInvitationsGet");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OrganisationDto>("/api/organisations/{id}/invitations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdInvitationsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invite a user/ email address to your organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns></returns>
        public void ApiOrganisationsIdInvitationsPost (string id, Invitation invitation = null)
        {
             ApiOrganisationsIdInvitationsPostWithHttpInfo(id, invitation);
        }

        /// <summary>
        /// Invite a user/ email address to your organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiOrganisationsIdInvitationsPostWithHttpInfo (string id, Invitation invitation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdInvitationsPost");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = invitation;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/api/organisations/{id}/invitations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdInvitationsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invite a user/ email address to your organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiOrganisationsIdInvitationsPostAsync (string id, Invitation invitation = null)
        {
             await ApiOrganisationsIdInvitationsPostAsyncWithHttpInfo(id, invitation);

        }

        /// <summary>
        /// Invite a user/ email address to your organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="invitation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiOrganisationsIdInvitationsPostAsyncWithHttpInfo (string id, Invitation invitation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdInvitationsPost");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = invitation;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/api/organisations/{id}/invitations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdInvitationsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns></returns>
        public void ApiOrganisationsIdPut (string id, OrganisationDto organisationDto = null)
        {
             ApiOrganisationsIdPutWithHttpInfo(id, organisationDto);
        }

        /// <summary>
        /// Updates an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AmphoraData.Client.Client.ApiResponse<Object> ApiOrganisationsIdPutWithHttpInfo (string id, OrganisationDto organisationDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdPut");

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = organisationDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiOrganisationsIdPutAsync (string id, OrganisationDto organisationDto = null)
        {
             await ApiOrganisationsIdPutAsyncWithHttpInfo(id, organisationDto);

        }

        /// <summary>
        /// Updates an organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organisation Id</param>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<Object>> ApiOrganisationsIdPutAsyncWithHttpInfo (string id, OrganisationDto organisationDto = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AmphoraData.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OrganisationsApi->ApiOrganisationsIdPut");


            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", AmphoraData.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = organisationDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/organisations/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>OrganisationDto</returns>
        public OrganisationDto ApiOrganisationsPost (OrganisationDto organisationDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = ApiOrganisationsPostWithHttpInfo(organisationDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>ApiResponse of OrganisationDto</returns>
        public AmphoraData.Client.Client.ApiResponse< OrganisationDto > ApiOrganisationsPostWithHttpInfo (OrganisationDto organisationDto = null)
        {
            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = AmphoraData.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AmphoraData.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = organisationDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< OrganisationDto >("/api/organisations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of OrganisationDto</returns>
        public async System.Threading.Tasks.Task<OrganisationDto> ApiOrganisationsPostAsync (OrganisationDto organisationDto = null)
        {
             AmphoraData.Client.Client.ApiResponse<OrganisationDto> localVarResponse = await ApiOrganisationsPostAsyncWithHttpInfo(organisationDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Organisation. This will assign the logged in user to the organisation. 
        /// </summary>
        /// <exception cref="AmphoraData.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisationDto"> (optional)</param>
        /// <returns>Task of ApiResponse (OrganisationDto)</returns>
        public async System.Threading.Tasks.Task<AmphoraData.Client.Client.ApiResponse<OrganisationDto>> ApiOrganisationsPostAsyncWithHttpInfo (OrganisationDto organisationDto = null)
        {

            AmphoraData.Client.Client.RequestOptions requestOptions = new AmphoraData.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = organisationDto;

            // authentication (token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OrganisationDto>("/api/organisations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiOrganisationsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
