/* 
 * Amphora Data Api
 *
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: rian@amphoradata.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AmphoraData.Client.Client.OpenAPIDateConverter;

namespace AmphoraData.Client.Model
{
    /// <summary>
    /// Summary
    /// </summary>
    [DataContract]
    public partial class Summary :  IEquatable<Summary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="query">query.</param>
        /// <param name="queryType">queryType.</param>
        /// <param name="queryTime">queryTime.</param>
        /// <param name="numResults">numResults.</param>
        /// <param name="offset">offset.</param>
        /// <param name="totalResults">totalResults.</param>
        /// <param name="fuzzyLevel">fuzzyLevel.</param>
        public Summary(string query = default(string), string queryType = default(string), long queryTime = default(long), long numResults = default(long), long offset = default(long), long totalResults = default(long), long fuzzyLevel = default(long))
        {
            this.Query = query;
            this.QueryType = queryType;
            this.QueryTime = queryTime;
            this.NumResults = numResults;
            this.Offset = offset;
            this.TotalResults = totalResults;
            this.FuzzyLevel = fuzzyLevel;
        }
        
        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name="queryType", EmitDefaultValue=false)]
        public string QueryType { get; set; }

        /// <summary>
        /// Gets or Sets QueryTime
        /// </summary>
        [DataMember(Name="queryTime", EmitDefaultValue=false)]
        public long QueryTime { get; set; }

        /// <summary>
        /// Gets or Sets NumResults
        /// </summary>
        [DataMember(Name="numResults", EmitDefaultValue=false)]
        public long NumResults { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public long Offset { get; set; }

        /// <summary>
        /// Gets or Sets TotalResults
        /// </summary>
        [DataMember(Name="totalResults", EmitDefaultValue=false)]
        public long TotalResults { get; set; }

        /// <summary>
        /// Gets or Sets FuzzyLevel
        /// </summary>
        [DataMember(Name="fuzzyLevel", EmitDefaultValue=false)]
        public long FuzzyLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  QueryTime: ").Append(QueryTime).Append("\n");
            sb.Append("  NumResults: ").Append(NumResults).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  TotalResults: ").Append(TotalResults).Append("\n");
            sb.Append("  FuzzyLevel: ").Append(FuzzyLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Summary);
        }

        /// <summary>
        /// Returns true if Summary instances are equal
        /// </summary>
        /// <param name="input">Instance of Summary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                ) && 
                (
                    this.QueryTime == input.QueryTime ||
                    this.QueryTime.Equals(input.QueryTime)
                ) && 
                (
                    this.NumResults == input.NumResults ||
                    this.NumResults.Equals(input.NumResults)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.TotalResults == input.TotalResults ||
                    this.TotalResults.Equals(input.TotalResults)
                ) && 
                (
                    this.FuzzyLevel == input.FuzzyLevel ||
                    this.FuzzyLevel.Equals(input.FuzzyLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.QueryType != null)
                    hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                hashCode = hashCode * 59 + this.QueryTime.GetHashCode();
                hashCode = hashCode * 59 + this.NumResults.GetHashCode();
                hashCode = hashCode * 59 + this.Offset.GetHashCode();
                hashCode = hashCode * 59 + this.TotalResults.GetHashCode();
                hashCode = hashCode * 59 + this.FuzzyLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
